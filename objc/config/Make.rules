# **********************************************************************
#
# Copyright (c) 2003-2014 ZeroC, Inc. All rights reserved.
#
# This copy of Ice Touch is licensed to you under the terms described
# in the ICE_TOUCH_LICENSE file included in this distribution.
#
# **********************************************************************

#
# Select an installation base directory for a command line build. The
# directory will be created if it does not exist.
#
prefix			 ?= /Library/Developer/IceTouch-$(VERSION)

#
# Xcode root directory. If you have several Xcode versions installed,
# choose the version you want to use to build Ice Touch. The default
# is the one returned by "xcode-select -print-path". 
#
#XCODE_PATH          = /Applications/Xcode.app

#
# The "root directory" for runpath embedded in executables. Can be
# unset to avoid adding a runpath to executables. This setting only
# applies for OS X command line builds.
#
embedded_runpath_prefix  ?= /Library/Developer/IceTouch-$(VERSION_MAJOR).$(VERSION_MINOR)

#
# Define OPTIMIZE_SIZE as yes if you want to build with minimal size.
# Define OPTIMIZE_SPEED as yes if you want to build with maximum speed.
#
# These options are mutually exclusive. If neither is set, Ice Touch
# is built with debug information.
#
#OPTIMIZE_SIZE		= yes
#OPTIMIZE_SPEED		= yes

#
# Compile for the iPhone platform (an Xcode SDK).
#
#COMPILE_FOR_IPHONE	    	= yes

#
# Compile for the iPhone simulator platform (an Xcode SDK).
#
#COMPILE_FOR_IPHONE_SIMULATOR 	= yes

#
# Compile for Cocoa (an Xcode SDK).
#
#COMPILE_FOR_COCOA 	        = yes

#
# The minimum SDK version supported by targets, the default is 5.1.1
# to allow using Ice Touch binaries older iOS versions.
#
#IOS_TARGET_MIN_SDK_VERSION	= 5.1.1

#
# Compile the OS X command line and Cocoa SDKs with garbage collection
# support (deprecated).
#
#COMPILE_WITH_GC		= yes 

#
# The default is to build for a OS X command line dynamic library, and
# C++ Cocoa SDK with static libraries.
#
# You can choose to build static libraries for the OS X command line
# build.
#
#STATICLIBS			= yes

#
# The build architectures. For release builds, the default is to build
# fat binaries with all supported architectures. For debug builds, a
# single architecture is built. The list of supported architectures
# depends on the targeted platform. You can override the following
# setting to build binaries for the architecture of your choice.
#
# Cocoa / OS X: 
#
#CXXARCHFLAGS            = -arch i386 -arch x86_64
#
# iPhone:
#
#CXXARCHFLAGS            = -arch armv7 -arch armv7s -arch arm64
#
# iPhone Simulator:
#
#CXXARCHFLAGS            = -arch i386 -arch x86_64

# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

#
# Common definitions
#
ice_language     = objc
slice_translator = slice2objc

ifeq ($(IOS_TARGET_MIN_SDK_VERSION),)
    IOS_TARGET_MIN_SDK_VERSION = 5.1.1
endif

ifeq ($(OSX_TARGET_MIN_SDK_VERSION),)
    OSX_TARGET_MIN_SDK_VERSION = 10.7
endif

ifneq ($(XCODE_PATH),)
    export DEVELOPER_DIR := $(XCODE_PATH)/Contents/Developer
endif

#
# Set the platform name according to the build type.
#
ifeq ($(COMPILE_FOR_IPHONE_SIMULATOR),yes)
    STATICLIBS = yes
    PLATFORM_NAME = iphonesimulator
else ifeq ($(COMPILE_FOR_IPHONE),yes)
    STATICLIBS = yes
    PLATFORM_NAME = iphoneos
else ifeq ($(COMPILE_FOR_COCOA),yes)
    STATICLIBS = yes
    PLATFORM_NAME = macosx
else
    PLATFORM_NAME = macosx
    COMPILE_FOR_MACOSX = yes
endif

ifeq ($(shell test -f $(top_srcdir)/config/Make.common.rules && echo 0),0)
    include $(top_srcdir)/config/Make.common.rules
else
    include $(top_srcdir)/../config/Make.common.rules
endif

ifeq ($(OPTIMIZE_SPEED),yes)
    OPTIMIZE		= yes
else ifeq ($(OPTIMIZE_SIZE),yes)
    OPTIMIZE		= yes
else ifeq ($(OPTIMIZE),yes)
    OPTIMIZE_SPEED	= yes
endif

ifeq ($(COMPILE_FOR_MACOSX),yes)
    bindir	= $(top_srcdir)/bin
    ifdef ice_src_dist
        libdir		= $(top_srcdir)/lib
        includedir	= $(top_srcdir)/include
    else
        libdir		= $(ice_dir)/$(libsubdir)
        includedir	= $(ice_dir)/include
    endif
    install_includedir  := $(prefix)/include
    install_libdir	:= $(prefix)/$(libsubdir)
    install_bindir	:= $(prefix)/$(binsubdir)$(cpp11suffix)
else
    ifdef ice_src_dist
        SDK_DIR		= $(top_srcdir)/SDKs/ObjC/$(PLATFORM_NAME).sdk
    else
        SDK_DIR         = $(ice_dir)/SDKs/ObjC/$(PLATFORM_NAME).sdk
    endif
    libdir	= $(SDK_DIR)/usr/local/lib
    ifdef ice_src_dist
        includedir	= $(top_srcdir)/include
    else
        includedir	= $(SDK_DIR)/usr/local/include
    endif
endif

ifneq ($(embedded_runpath_prefix),)
   runpath_libdir	:= $(embedded_runpath_prefix)/$(libsubdir)
   ifneq ($(COMPILE_FOR_IPHONE),yes)
       ifneq ($(STATICLIBS),yes)
           create_runpath_symlink ?= yes
       endif
   endif
endif

#
# Platform specific definitions
#
include	 $(top_srcdir)/config/Make.rules.$(UNAME)

ICECPPFLAGS		= -I$(slicedir)
SLICE2CPPFLAGS		= $(ICECPPFLAGS)
SLICE2OBJCFLAGS		= $(ICECPPFLAGS)
LDFLAGS			= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(libdir)

FLEXFLAGS	        :=
BISONFLAGS		:= -dvt

CPPFLAGS		+= -I$(includedir) $(CPPPLATFORMFLAGS)
LDFLAGS			= $(LDPLATFORMFLAGS) $(CXXFLAGS) -L$(libdir) 

ifdef ice_src_dist
    ifeq ($(ice_cpp_dir), $(ice_dir)/cpp)
        SLICE2CPP = $(ice_cpp_dir)/bin/slice2cpp
        SLICE2OBJC = $(ice_cpp_dir)/bin/slice2objc
    else
        SLICE2CPP = $(ice_cpp_dir)/$(binsubdir)/slice2cpp
        SLICE2OBJC = $(ice_cpp_dir)/$(binsubdir)/slice2objc
    endif
else
    SLICE2CPP = $(ice_dir)/$(binsubdir)/slice2cpp
    SLICE2OBJC = $(ice_dir)/$(binsubdir)/slice2objc
endif

ifeq ($(STATICLIBS),yes)
    ICEOBJCLIB = $(libdir)/libIceObjC.a
endif

OBJDIR = $(PLATFORM_NAME)$(libsuffix)

# This cannot use .cpp:.o as we have multiple types of source files.

EVERYTHING		= all depend clean install 

.SUFFIXES:
.SUFFIXES:		.mm .m .o .cpp  .c

.m.o:
	$(CC) -c $(ARCFLAGS) $(CPPFLAGS) $(OBJCFLAGS) $(CFLAGS) $<

.mm.o:
	$(CXX) -c $(ARCFLAGS) $(CPPFLAGS) $(CXXFLAGS) $(OBJCXXFLAGS) $<

%.o: %.cpp
	$(CXX) -c $(CPPFLAGS) $(CXXFLAGS) $<

%.h %.m: %.y
	rm -f $(*F).h $(*F).c
	bison $(BISONFLAGS) $<
	mv $(*F).tab.c $(*F).m
	mv $(*F).tab.h $(*F).h
	rm -f $(*F).output

%.m: %.l
	flex $(FLEXFLAGS) $<
	rm -f $@
	cat lex.yy.c >> $@
	rm -f lex.yy.c

all:: $(SRCS) $(TARGETS)

ifneq ($(SRCS),)
depend:: $(SRCS)
	-rm -f .depend .depend.mak
	if test -n "$(SRCS)" ; then \
	    $(CXX) -DMAKEDEPEND -M $(CPPFLAGS) $(SRCS) | $(ice_dir)/objc/config/makedepend.py $(DEPENDFLAGS) >> .depend; \
	fi
endif

ifneq ($(TARGETS),)
clean::
	-rm -f $(TARGETS)
endif

clean::
	-rm -f core *.o *.bak
	-rm -f ./$(OBJDIR)/*.o

$(HDIR)/%F.h: $(SDIR)/%F.ice $(SLICE2OBJC)
	rm -f $(HDIR)/$(*F)F.h $(*F)F.m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<
	mv $(*F)F.h $(HDIR)
	rm -f $(*F)F.m

$(HDIR)/%.h %.m: $(SDIR)/%.ice $(SLICE2OBJC)
	rm -f $(HDIR)/$(*F).h $(*F).m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<
	mv $(*F).h $(HDIR)

%.h %.m: %.ice $(SLICE2OBJC)
	rm -f $(*F).h $(*F).m
	$(SLICE2OBJC) $(SLICE2OBJCFLAGS) $<

ifneq ($(SLICE_SRCS),)
depend:: $(SLICE_SRCS)
	if test -n "$(SLICE_SRCS)" ; then \
	  if test -n "$(HDIR)"; then \
	    $(SLICE2OBJC) --depend $(SLICE2OBJCFLAGS) $(SLICE_SRCS) | $(ice_dir)/config/makedepend.py "\$$(HDIR)"; \
	  else \
	    $(SLICE2OBJC) --depend $(SLICE2OBJCFLAGS) $(SLICE_SRCS) | $(ice_dir)/config/makedepend.py;  \
	  fi \
	fi
	$(foreach slice, $(SLICE_SRCS), echo '$(slice): $$(SLICE2OBJC)' >> .depend;)

clean::
	rm -f $(addsuffix .m, $(basename $(notdir $(SLICE_SRCS))))
	rm -f $(addsuffix .h, $(basename $(notdir $(SLICE_SRCS))))
endif

ifneq ($(HDIR),)
clean::
	rm -f $(addprefix $(HDIR), $(addsuffix .h, $(basename $(subst $(SDIR),, \
	$(filter $(SDIR)/%.ice, $(SLICE_SRCS))))))
endif

install::
